import mediapipe as mp
import cv2
import numpy as np
import time

mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

def euclidean_distance(a, b):
    return np.linalg.norm(np.array(a) - np.array(b))

def check_blink(landmarks):
    left_eye_top = landmarks.landmark[159].x, landmarks.landmark[159].y
    left_eye_bottom = landmarks.landmark[145].x, landmarks.landmark[145].y
    right_eye_top = landmarks.landmark[386].x, landmarks.landmark[386].y
    right_eye_bottom = landmarks.landmark[374].x, landmarks.landmark[374].y

    left_eye_distance = euclidean_distance(left_eye_top, left_eye_bottom)
    right_eye_distance = euclidean_distance(right_eye_top, right_eye_bottom)

    blink_threshold = 0.02

    return left_eye_distance < blink_threshold or right_eye_distance < blink_threshold

cap = cv2.VideoCapture(0)
drawing_spec = mp_drawing.DrawingSpec(thickness=1, circle_radius=1)
prev_time = 0
display_text = False

with mp_face_mesh.FaceMesh(
    max_num_faces=1,
    refine_landmarks=True,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5) as face_mesh:

    while cap.isOpened():
        success, image = cap.read()
        if not success:
            print("Ignoring empty camera frame.")
            continue

        image.flags.writeable = False
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        results = face_mesh.process(image)

        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

        if results.multi_face_landmarks:
            for face_landmarks in results.multi_face_landmarks:
                if check_blink(face_landmarks):
                    current_time = time.time()
                    if current_time - prev_time >= 1:  # Wait at least 1 second between blinks
                        display_text = True
                        prev_time = current_time

                mp_drawing.draw_landmarks(
                    image=image,
                    landmark_list=face_landmarks,
                    connections=mp_face_mesh.FACEMESH_TESSELATION,
                    landmark_drawing_spec=None,
                    connection_drawing_spec=mp_drawing_styles
                    .get_default_face_mesh_tesselation_style())
                mp_drawing.draw_landmarks(
                    image=image,
                    landmark_list=face_landmarks,
                    connections=mp_face_mesh.FACEMESH_CONTOURS,
                    landmark_drawing_spec=None,
                    connection_drawing_spec=mp_drawing_styles
                    .get_default_face_mesh_contours_style())
                mp_drawing.draw_landmarks(
                    image=image,
                    landmark_list=face_landmarks,
                    connections=mp_face_mesh.FACEMESH_IRISES,
                    landmark_drawing_spec=None,
                    connection_drawing_spec=mp_drawing_styles
                    .get_default_face_mesh_iris_connections_style())

        if display_text:
            text_image = np.zeros((200, 500), dtype=np.uint8)
            font = cv2.FONT_HERSHEY_SIMPLEX
            text_color = (255, 255, 255)
            cv2.putText(text_image, "Hello, World!", (50, 100), font, 1, text_color, 2, cv2.LINE_AA)
            cv2.imshow
